// frontend/src/App.tsx（テスト版）
import React, { useState } from 'react';
import { Shield, Users, MessageSquare, Target, LogOut, Database, Eye, EyeOff, Lock, Mail } from 'lucide-react';

// TailwindCSSテスト用コンポーネント
const TestTailwindCSS: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-md mx-auto">
        <div className="bg-white rounded-2xl shadow-xl border p-8">
          <div className="text-center mb-8">
            <div className="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
              <Database className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900">TailwindCSS テスト</h1>
            <p className="text-gray-600 mt-2">スタイルが適用されていれば成功です</p>
          </div>
          
          <div className="space-y-4">
            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h3 className="font-medium text-blue-900">ブルーカード</h3>
              <p className="text-sm text-blue-700 mt-1">TailwindCSSが正しく動作しています</p>
            </div>
            
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <h3 className="font-medium text-green-900">グリーンカード</h3>
              <p className="text-sm text-green-700 mt-1">レスポンシブデザインも機能しています</p>
            </div>
            
            <button className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
              テストボタン
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// 元の機能付きApp
const TaskManagementApp: React.FC = () => {
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // ログイン処理
  const handleLoginSuccess = (user: any) => {
    setCurrentUser(user);
    setIsAuthenticated(true);
  };

  // ログイン画面
  const LoginScreen: React.FC = () => {
    const [credentials, setCredentials] = useState({
      identifier: '',
      password: '',
      rememberMe: false
    });
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleLogin = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // デモ用認証
        if (credentials.identifier === 'admin@company.com' && credentials.password === 'admin123') {
          handleLoginSuccess({
            id: 'admin001',
            name: '管理者 太郎',
            email: 'admin@company.com',
            role: 'admin'
          });
        } else if (credentials.identifier === 'employee@company.com' && credentials.password === 'emp123') {
          handleLoginSuccess({
            id: 'emp001',
            name: '社員 花子',
            email: 'employee@company.com',
            role: 'employee'
          });
        } else {
          throw new Error('ログイン情報が正しくありません');
        }
      } catch (error) {
        setError(error instanceof Error ? error.message : 'ログインに失敗しました');
      } finally {
        setIsLoading(false);
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          <div className="bg-white rounded-2xl shadow-xl border p-8">
            <div className="text-center mb-8">
              <div className="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
                <Database className="w-8 h-8 text-white" />
              </div>
              <h1 className="text-2xl font-bold text-gray-900">タスク管理くん</h1>
              <p className="text-gray-600 mt-2">ログインしてください</p>
            </div>

            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            )}

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ユーザーID / メールアドレス
                </label>
                <div className="relative">
                  <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    value={credentials.identifier}
                    onChange={(e) => setCredentials(prev => ({ ...prev, identifier: e.target.value }))}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="admin@company.com"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  パスワード
                </label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="password"
                    value={credentials.password}
                    onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="admin123"
                  />
                </div>
              </div>

              <button
                onClick={handleLogin}
                disabled={isLoading || !credentials.identifier || !credentials.password}
                className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? 'ログイン中...' : 'ログイン'}
              </button>
            </div>

            {/* デモ情報 */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <p className="text-sm text-gray-600 text-center mb-4">デモアカウント</p>
              <div className="text-xs text-gray-500 space-y-1">
                <p><strong>管理者:</strong> admin@company.com / admin123</p>
                <p><strong>社員:</strong> employee@company.com / emp123</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // メイン画面
  const MainScreen: React.FC = () => {
    const handleLogout = () => {
      setCurrentUser(null);
      setIsAuthenticated(false);
    };

    return (
      <div className="min-h-screen bg-gray-50">
        <nav className="bg-white shadow-sm border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-6">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center gap-4">
                <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                  <Target className="w-5 h-5 text-white" />
                </div>
                <h1 className="text-xl font-bold text-gray-900">タスク管理くん</h1>
              </div>

              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    currentUser?.role === 'admin' ? 'bg-blue-100' : 'bg-green-100'
                  }`}>
                    {currentUser?.role === 'admin' ? (
                      <Shield className="w-4 h-4 text-blue-600" />
                    ) : (
                      <Users className="w-4 h-4 text-green-600" />
                    )}
                  </div>
                  <div className="text-sm">
                    <div className="font-medium text-gray-900">{currentUser?.name}</div>
                    <div className="text-gray-500">
                      {currentUser?.role === 'admin' ? '管理者' : '社員'}
                    </div>
                  </div>
                </div>
                
                <button
                  onClick={handleLogout}
                  className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  title="ログアウト"
                >
                  <LogOut className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </nav>

        <main className="p-6">
          <div className="max-w-7xl mx-auto">
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">
                ようこそ、{currentUser?.name}さん！
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="p-6 bg-blue-50 rounded-lg border border-blue-200">
                  <Target className="w-8 h-8 text-blue-600 mb-4" />
                  <h3 className="font-semibold text-blue-900 mb-2">タスク管理</h3>
                  <p className="text-sm text-blue-700">個人・チーム・全社のタスクを管理できます</p>
                </div>
                
                <div className="p-6 bg-purple-50 rounded-lg border border-purple-200">
                  <MessageSquare className="w-8 h-8 text-purple-600 mb-4" />
                  <h3 className="font-semibold text-purple-900 mb-2">Slack連携</h3>
                  <p className="text-sm text-purple-700">Slackメッセージからタスクを作成できます</p>
                </div>
                
                {currentUser?.role === 'admin' && (
                  <div className="p-6 bg-orange-50 rounded-lg border border-orange-200">
                    <Shield className="w-8 h-8 text-orange-600 mb-4" />
                    <h3 className="font-semibold text-orange-900 mb-2">管理者機能</h3>
                    <p className="text-sm text-orange-700">ユーザー・チーム・タグを管理できます</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </main>
      </div>
    );
  };

  return (
    <>
      {isAuthenticated ? <MainScreen /> : <LoginScreen />}
    </>
  );
};

// メインAppコンポーネント
const App: React.FC = () => {
  const [showTest, setShowTest] = useState(false);

  // テスト表示の切り替えボタンを一時的に追加
  return (
    <>
      {/* テスト切り替えボタン（開発用） */}
      <div className="fixed top-4 right-4 z-50">
        <button
          onClick={() => setShowTest(!showTest)}
          className="px-3 py-2 bg-gray-800 text-white text-xs rounded-md hover:bg-gray-700"
        >
          {showTest ? 'アプリ表示' : 'CSSテスト'}
        </button>
      </div>
      
      {showTest ? <TestTailwindCSS /> : <TaskManagementApp />}
    </>
  );
};

export default App;